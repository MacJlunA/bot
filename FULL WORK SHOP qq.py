import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import aiohttp
import time
import datetime
from aiogram.fsm.storage.memory import MemoryStorage
import random

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("Token error")

BLOCKCYPHER_TOKEN = os.getenv("BLOCKCYPHER_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
MONOBANK_API_KEY = os.getenv("MONOBANK_API_KEY")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

users = [7053825090]

def add_user(user_id):
    if user_id not in users:
        users.append(user_id)

products = {
    "product_1": {"name": "ü§ç –ú–µ—Ñ–µ–¥—Ä–æ–Ω Rolex 2g", "price": 900, "description": "–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –º–µ—Ñ–µ–¥—Ä–æ–Ω —è–Ω—Ç–∞—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –æ–Ω –∂–µ –®–∞–º–ø–∞–Ω—å! –ó–≤–æ–Ω–∫–∏–π —Ö—Ä—É—Å—Ç —Å—Ç–µ–∫–ª–∞ –ø–æ–¥ –∫–∞—Ä—Ç–æ–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/mefedron.jpg"},
    "product_2": {"name": "üíé Alpha-PvP VHQ 0.5g", "price": 300, "description": "–ß–∏—Å—Ç–µ–π—à–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä—É–∫–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ –•–∞–π–∑–µ–Ω–±–µ—Ä–≥ –≤ –º–∏—Ä–µ –ê–ª—å—Ñ—ã-PVP ", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/alphapvp.jpg"},
    "product_3": {"name": "‚ùå Alpha-PvP VHQ 1g", "price": 550, "description": "–ß–∏—Å—Ç–µ–π—à–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä—É–∫–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ –•–∞–π–∑–µ–Ω–±–µ—Ä–≥ –≤ –º–∏—Ä–µ –ê–ª—å—Ñ—ã-PVP ", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/alphapvp.jpg"},
    "product_4": {"name": "üíé Alpha-PvP VHQ 2g", "price": 850, "description": "–ß–∏—Å—Ç–µ–π—à–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä—É–∫–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ –•–∞–π–∑–µ–Ω–±–µ—Ä–≥ –≤ –º–∏—Ä–µ –ê–ª—å—Ñ—ã-PVP ", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/alphapvp.jpg"},
    "product_5": {"name": "‚ùå –ì—Ä–∏–±—ã Pink Buffalo 2g", "price": 600, "description": "–ì–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø—Ä–∏—è—Ç–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ 1-2–≥.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/mushrooms.jpg"},
    "product_6": {"name": "‚ùå –ì—Ä–∏–±—ã Pink Buffalo 3g", "price": 850, "description": "–ì–∞–ª–ª—é—Ü–∏–Ω–æ–≥–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø—Ä–∏—è—Ç–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ 1-2–≥.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/mushrooms.jpg"},
    "product_7": {"name": "üåø –®–∏—à–∫–∏ White Widow 2g", "price": 500, "description": "–°–∏–ª—å–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏ 19-20% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava.jpg"},
    "product_8": {"name": "üåø –®–∏—à–∫–∏ White Widow 5g", "price": 1150, "description": "–°–∏–ª—å–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏ 19-20% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava.jpg"},
    "product_9": {"name": "üåø –®–∏—à–∫–∏ White Widow 10g", "price": 2200, "description": "–°–∏–ª—å–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏ 19-20% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava.jpg"},
    "product_10": {"name": "üåø –®–∏—à–∫–∏ White Widow 20g", "price": 4600, "description": "–°–∏–ª—å–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏ 19-20% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava.jpg"},
    "product_11": {"name": "‚ùå MDA Adam 1g - 1400 –≥—Ä–Ω", "price": 1400, "description": "–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —Ç–µ–Ω–∞–º—Ñ–µ—Ç–∞–º–∏–Ω. –î–∞—Ä–∏—Ç –¥–ª–∏–Ω–Ω—É—é —ç–º–ø–∞—Ç–∏—é, —Å—Ç–∏–º—É–ª—è—Ü–∏—é –∏ —ç–π—Ñ–æ—Ä–∏—é —Å –Ω–æ—Ç–∞–º–∏ –ø—Å–∏—Ö–æ–¥–µ–ª–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ä–∞–ª—å–Ω–∞—è –¥–æ–∑–∞ 60-150–º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/mda.jpeg"},
    "product_12": {"name": "ü§ç Amphetamine White Power 2g", "price": 550, "description": "–°—Ç–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ 50-100–º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/Amphetamine.jpg"},
    "product_13": {"name": "‚ùå Amphetamine White Power 5g", "price": 1300, "description": "–°—Ç–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ 50-100–º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/Amphetamine.jpg"},
    "product_14": {"name": "ü§ç Amphetamine White Power 10g", "price": 2600, "description": "–°—Ç–∏–º—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ 50-100–º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/Amphetamine.jpg"},
    "product_15": {"name": "‚ùå LSD-25 Acid 175 MG üóÇ 1pcx", "price": 400, "description": "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–µ—Ç, –∫—Ä–∞—Å–∫–∏ –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è, —Å–æ–∑–Ω–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è, –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏–∏ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é. –ú–∏—Ä –≤–æ–∫—Ä—É–≥ ‚Äì –∂–∏–≤–æ–µ –ø–æ–ª–æ—Ç–Ω–æ, –≥–¥–µ –∫–∞–∂–¥–∞—è –º—ã—Å–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º! –î–æ–∑–∏—Ä–æ–≤–∫–∞ 150-300 –º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/lsd.jpg"},
    "product_16": {"name": "üóÇ LSD-25 Acid 175 MG üóÇ 3pcx", "price": 1000, "description": "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–µ—Ç, –∫—Ä–∞—Å–∫–∏ –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è, —Å–æ–∑–Ω–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è, –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏–∏ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é. –ú–∏—Ä –≤–æ–∫—Ä—É–≥ ‚Äì –∂–∏–≤–æ–µ –ø–æ–ª–æ—Ç–Ω–æ, –≥–¥–µ –∫–∞–∂–¥–∞—è –º—ã—Å–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º! –î–æ–∑–∏—Ä–æ–≤–∫–∞ 150-300 –º–≥", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/lsd.jpg"},
    "product_17": {"name": "üåø –®–∏—à–∫–∏ üåø AK-47 5g", "price": 1200, "description": "–¢–µ–ø–ª–∏—á–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏. 21-22% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava2.jpg"},
    "product_18": {"name": "üåø –®–∏—à–∫–∏ üåø AK-47 10g", "price": 2150, "description": "–¢–µ–ø–ª–∏—á–Ω—ã–µ —Å–∞—Ç–∏–≤–Ω—ã–µ —à–∏—à–∫–∏. 21-22% THC", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/trava2.jpg"},
    "product_19": {"name": "üéÅ 1 x 300mg MDMA Punisher", "price": 350, "description": "–≠–∫—Å—Ç–∞–∑–∏ –∏–∑ –ê–º—Å—Ç–µ—Ä–¥–∞–º–∞. –î–≤–æ–π–Ω–∞—è –¥–æ–∑–∞, –Ω–æ–≤–∏—á–∫–∞–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å –ø–æ–ª–æ–≤–∏–Ω–∫–∏. –¶–≤–µ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø–∞—Ä—Ç–∏–∏ –∫ –ø–∞—Ä—Ç–∏–∏.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/extazy.jpg"},
    "product_20": {"name": "üíä 1 x Xanax", "price": 450, "description": "–ì–∞—Å–∏—Ç —Ç—Ä–µ–≤–æ–≥—É, –∫–∞–∫ —Ç—ë–ø–ª—ã–π –ø–ª–µ–¥ –≤ —Ö–æ–ª–æ–¥–Ω—ã–π –≤–µ—á–µ—Ä. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à—Ç–∏–ª—å, –ª—ë–≥–∫–æ—Å—Ç—å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–ª–∞–±—å—Å—è –∏ –¥—ã—à–∏ —Ä–æ–≤–Ω–æ.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/xanax.jpg"},
    "product_21": {"name": "üíä 3 x Xanax", "price": 1300, "description": "–ì–∞—Å–∏—Ç —Ç—Ä–µ–≤–æ–≥—É, –∫–∞–∫ —Ç—ë–ø–ª—ã–π –ø–ª–µ–¥ –≤ —Ö–æ–ª–æ–¥–Ω—ã–π –≤–µ—á–µ—Ä. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à—Ç–∏–ª—å, –ª—ë–≥–∫–æ—Å—Ç—å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–ª–∞–±—å—Å—è –∏ –¥—ã—à–∏ —Ä–æ–≤–Ω–æ.", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/xanax.jpg"},
    "product_22": {"name": "üíä 14 x Lirika", "price": 2500, "description": "–ú—è–≥–∫–∞—è –≤–æ–ª–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç —Å –≥–æ–ª–æ–≤–æ–π, —Ä–∞—Å—Ç–≤–æ—Ä—è—è —Ç—Ä–µ–≤–æ–≥–∏ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ. –õ–µ–≥–∫–æ—Å—Ç—å, —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏ –∫–∞–ø–ª—è –±–ª–∞–∂–µ–Ω—Å—Ç–≤–∞ ‚Äì –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–º–µ–Ω—Ç–æ–º!", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/lirika.jpg"},
    "product_23": {"name": "üíä 28 x Lirika", "price": 4700, "description": "–ú—è–≥–∫–∞—è –≤–æ–ª–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç —Å –≥–æ–ª–æ–≤–æ–π, —Ä–∞—Å—Ç–≤–æ—Ä—è—è —Ç—Ä–µ–≤–æ–≥–∏ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ. –õ–µ–≥–∫–æ—Å—Ç—å, —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏ –∫–∞–ø–ª—è –±–ª–∞–∂–µ–Ω—Å—Ç–≤–∞ ‚Äì –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–º–µ–Ω—Ç–æ–º!", "photo": "https://raw.githubusercontent.com/MacJlunA/123123q/main/lirika.jpg"}
}

districts = {
    "kiev": [
        "üåÉ –¢–µ—Ä–µ–º–∫–∏ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ê–∫–∞–¥–µ–º–≥–æ—Ä–æ–¥–æ–∫ üåÉ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –û—Å–æ–∫–æ—Ä–∫–∏ ‚ùå",
        "üåÉ –ü–æ–∑–Ω—è–∫–∏ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ò–ø–æ–¥—Ä–æ–º ‚ùå",
        "üåÉ –°–æ–ª–æ–º–µ–Ω—Å–∫–∏–π ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –®—É–ª—è–≤–∫–∞ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ö–∞–¥–µ—Ç—Å–∫–∏–π –ì–∞–π ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ë–æ—Ä—â–∞–≥–æ–≤–∫–∞ ‚ùå",
        "üåÉ –í–æ–∫–∑–∞–ª—å–Ω–∞—è ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ß–æ–∫–æ–ª–æ–≤–∫–∞ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç–∞ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –õ–µ—Å–æ–≤–æ–π ‚ùå",
        "üåÉ –ì–æ–ª–æ—Å–µ–µ–≤—Å–∫–∞—è ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –í—ã–¥—É–±–∏—á–∏ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω–∞—è ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ù–∏–≤–∫–∏ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ö—Ä–∞—Å–Ω—ã–π –•—É—Ç–æ—Ä ‚ùå",
        "üåÉ –î–µ–º–µ–µ–≤—Å–∫–∞—è ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
    ],
    "lviv": [
        "üåÉ –¶–µ–Ω—Ç—Ä ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –°–∏—Ö–æ–≤ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π ‚ùå (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –®–µ–≤—á–µ–Ω–∫–æ–≤—Å–∫–∏–π ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –§—Ä–∞–Ω–∫–æ–≤—Å–∫–∏–π ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",

    ],
    "odesa": [
        "üåÉ –¶–µ–Ω—Ç—Ä ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ê—Ä–∫–∞–¥–∏—è ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –¢–∞–∏—Ä–æ–≤–æ ‚ùå",
        "üåÉ –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫ ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ê—Ä–∫–∞–¥–∏—è ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –•–∞–¥–∂–∏–±–µ–π ‚ùå",
        "üåÉ –õ–∏–º–∞–Ω–∫–∞ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ö–∏–µ–≤—Å–∫–∏–π ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
    ],
    "zaporizhzhia": [
        "üåÉ –¶–µ–Ω—Ç—Ä ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –•–æ—Ä—Ç–∏—Ü–∞ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –í–æ–∑–Ω–µ—Å–µ–Ω–æ–≤—Å–∫–∏–π ‚ùå",
        "üåÉ –ö–∏—á–∫–∞—Å ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ó–∞–≤–æ–¥—Å–∫–æ–π ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
        "üåÉ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π  ‚ùå",
        "üåÉ –®–µ–≤—á–µ–Ω–∫–æ–≤—Å–∫–∏–π ‚ùå",
        "üåÉ –î–Ω–µ–ø—Ä–æ–≤—Å–∫–∏–π ‚úÖ (–ú–∞–≥–Ω–∏—Ç)",
    ],
    "sumy": [
        "üåÉ –•–∏–º–∫–∏ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª (–ê—ç—Ä–æ–ø–æ—Ä—Ç) ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ö–∏—Ä–æ–≤–æ ‚úÖ (–ü—Ä–∏–∫–æ–ø)",
        "üåÉ –ó–∞—Ä–µ—á–Ω—ã–π ‚úÖ (–ü—Ä–∏–∫–æ–ø)",

        ]
}

@dp.message(Command("help"))
async def send_help(message: types.Message):
    help_text = """üôã –ü—Ä–∏–≤–µ—Ç –ë—Ä–æ üôã
–≠—Ç–æ –±–æ—Ç ü•á KYIV THC BOT ü•á
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ùì /help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚ùì

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚†Ä‚†Ä‚†Ä‚†Ä‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ö–û–ù–¢–ê–ö–¢–´ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è

‚ù§Ô∏è–û–ü–ï–†–ê–¢–û–† –ü–û–ß–¢–û–í–´–• –ó–ê–ö–ê–ó–û–í - @operator_thc ‚ù§Ô∏è

‚ù§Ô∏è–û–ü–ï–†–ê–¢–û–† –ü–û –ù–ï–ù–ê–•–û–î–ê–ú - @operator_thc ‚ù§Ô∏è

‚ù§Ô∏è!–í–ù–ò–ú–ê–ù–ò–ï, –ø–æ –Ω–µ–Ω–∞—Ö–æ–¥–∞–º –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º —Å –∫–ª–∞–¥–∞–º–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ @operator_thc , –ó–ê–°–û–†–Ø–Ø –õ–° –î–†–£–ì–ò–• –°–û–¢–†–£–î–ù–ò–ö–û–í –ù–ï –ü–û –ï–ì–û –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò - –ë–ê–ù!

‚ù§Ô∏è–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start ‚ù§Ô∏è
"""
    await message.answer(help_text)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèõ –ö–∏–µ–≤ üèõ", callback_data="city_kiev")],
        [InlineKeyboardButton(text="üè¢ –õ—å–≤–æ–≤ üè¢", callback_data="city_lviv")],
        [InlineKeyboardButton(text="üåä –û–¥–µ—Å—Å–∞ üåä", callback_data="city_odesa")],
        [InlineKeyboardButton(text="üè≠ –ó–∞–ø–æ—Ä–æ–∂—å–µ üè≠", callback_data="city_zaporizhzhia")],
        [InlineKeyboardButton(text="üåÅ –°—É–º—ã üåÅ", callback_data="city_sumy")],
    ])
    start_text = """üôã –ü—Ä–∏–≤–µ—Ç –ë—Ä–æ üôã
–≠—Ç–æ –±–æ—Ç ü•á KYIV THC BOT ü•á
–í—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ–¥ –∏ –ø–æ–≥–Ω–∞–ª–∏ ü•á
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ùì /help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚ùì

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
    await message.answer(start_text + "\n –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboard)

@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    if message.from_user.id not in [600790285]:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∞
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    broadcast_text = message.text.replace("/broadcast ", "")
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id, text=broadcast_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.callback_query(lambda c: c.data.startswith("city_"))
async def city_selected(callback_query: types.CallbackQuery, state: FSMContext):
    city_code = callback_query.data.split("_")[1]
    city_names = {
        "kiev": "–ö–∏–µ–≤",
        "lviv": "–õ—å–≤–æ–≤",
        "odesa": "–û–¥–µ—Å—Å–∞",
        "zaporizhzhia": "–ó–∞–ø–æ—Ä–æ–∂—å–µ",
        "sumy": "–°—É–º—ã",
    }

    city_name = city_names.get(city_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")

    await state.update_data(city=city_code)

    product_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="ü§ç –ú–µ—Ñ–µ–¥—Ä–æ–Ω ü§ç Rolex 2g - 900 –≥—Ä–Ω", callback_data="product_1"),
        InlineKeyboardButton(text="üíé Alpha-PvP üíé VHQ 0.5g - 300 –≥—Ä–Ω", callback_data="product_2")
    ],
    [
        InlineKeyboardButton(text="‚ùå Alpha-PvP üíé VHQ 1g - 450 –≥—Ä–Ω ", callback_data="product_3"),
        InlineKeyboardButton(text="üíé Alpha-PvP üíé VHQ 2g - 850 –≥—Ä–Ω", callback_data="product_4")
    ],
    [
        InlineKeyboardButton(text="‚ùå –ì—Ä–∏–±—ã üçÑ Pink Buffalo 2g - 600 –≥—Ä–Ω", callback_data="product_5"),
        InlineKeyboardButton(text="‚ùå –ì—Ä–∏–±—ã üçÑ Pink Buffalo 3g - 850 –≥—Ä–Ω", callback_data="product_6"),
    ],
    [
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø White Widow 2g - 500 –≥—Ä–Ω", callback_data="product_7"),
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø White Widow 5g - 1150 –≥—Ä–Ω", callback_data="product_8"),
    ],
    [
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø White Widow 10g - 2200 –≥—Ä–Ω", callback_data="product_9"),
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø White Widow 20g - 4000 –≥—Ä–Ω", callback_data="product_10"),
    ],
    [
        InlineKeyboardButton(text="‚ùå MDA ü§ç Adam 1g - 1400 –≥—Ä–Ω", callback_data="product_11"),
        InlineKeyboardButton(text="ü§ç Amphetamine ü§ç White Power 2g - 550 –≥—Ä–Ω", callback_data="product_12"),
    ],
    [
        InlineKeyboardButton(text="‚ùå Amphetamine ü§ç White Power 5g - 1300 –≥—Ä–Ω", callback_data="product_13"),
        InlineKeyboardButton(text="ü§ç Amphetamine ü§ç White Power 10g - 2600 –≥—Ä–Ω", callback_data="product_14"),
    ],
    [
        InlineKeyboardButton(text="‚ùå LSD-25 Acid 175 MG üóÇ 1pcx - 400 –≥—Ä–Ω", callback_data="product_15"),
        InlineKeyboardButton(text="üóÇ LSD-25 Acid 175 MG üóÇ 3pcx - 1000 –≥—Ä–Ω", callback_data="product_16"),
    ],
    [
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø AK-47 5g - 1200 –≥—Ä–Ω", callback_data="product_17"),
        InlineKeyboardButton(text="üåø –®–∏—à–∫–∏ üåø AK-47 10g - 2150 –≥—Ä–Ω", callback_data="product_18"),
    ],
    [
        InlineKeyboardButton(text="üéÅ 1 x 300mg MDMA Punisher - 350 –≥—Ä–Ω", callback_data="product_19"),
        InlineKeyboardButton(text="üíä 1 x Xanax - 450 –≥—Ä–Ω", callback_data="product_20"),
    ],
    [
        InlineKeyboardButton(text="üíä 3 x Xanax - 1300 –≥—Ä–Ω", callback_data="product_21"),
        InlineKeyboardButton(text="üíä 14 x –õ–∏—Ä–∏–∫–∞ - 2500 –≥—Ä–Ω", callback_data="product_22"),
    ],
    [
        InlineKeyboardButton(text="üíä 28 x –õ–∏—Ä–∏–∫–∞ - 4700 –≥—Ä–Ω", callback_data="product_23"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data="back_to_city")
    ]
])

    await callback_query.message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: üèõ {city_name} üèõ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=product_keyboard)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("product_"))
async def product_selected(callback_query: types.CallbackQuery, state: FSMContext):
    product_code = callback_query.data.split("_")[1]
    product = products.get(f"product_{product_code}")
    product_name = product["name"]
    product_price = product["price"]
    product_description = product["description"]
    product_photo = product["photo"]

    if "‚ùå" in product_name:
        await callback_query.message.answer("‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ ‚ùå")
        return

    await state.update_data(product=product_name, price=product_price, description=product_description)

    user_data = await state.get_data()
    city_name = user_data.get("city", "kiev")

    city_districts = districts.get(city_name, [])

    if not city_districts:
        await callback_query.message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name.get(city_name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')} —Ä–∞–π–æ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    district_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=district, callback_data=f"district_{i+1}")]
        for i, district in enumerate(city_districts)
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data=f"city_{city_name}")]])

    await callback_query.message.answer_photo(product_photo, caption=f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product_name}\n ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω", reply_markup=district_keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back_to_city")
async def back_to_city(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèõ –ö–∏–µ–≤ üèõ", callback_data="city_kiev")],
        [InlineKeyboardButton(text="üè¢ –õ—å–≤–æ–≤ üè¢", callback_data="city_lviv")],
        [InlineKeyboardButton(text="üåä –û–¥–µ—Å—Å–∞ üåä", callback_data="city_odesa")],
        [InlineKeyboardButton(text="üè≠ –ó–∞–ø–æ—Ä–æ–∂—å–µ üè≠", callback_data="city_zaporizhzhia")],
        [InlineKeyboardButton(text="üåÅ –°—É–º—ã üåÅ", callback_data="city_sumy")],
    ])
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("district_"))
async def district_selected(callback_query: types.CallbackQuery, state: FSMContext):
    district_index = int(callback_query.data.split("_")[1]) - 1
    user_data = await state.get_data()
    city_name = user_data.get("city", "–ö–∏–µ–≤")

    city_districts = districts.get(city_name.lower(), [])

    if district_index < 0 or district_index >= len(city_districts):
        district_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω"
    else:
        district_name = city_districts[district_index]

    await state.update_data(district=district_name)

    product_name = user_data.get("product", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    product_price = user_data.get("price", 0)
    product_description = user_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ Bitcoin üí∏", callback_data="payment_bitcoin")],
        [InlineKeyboardButton(text="üí≤ USDT TRC20 üí≤", callback_data="payment_usdt")],
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É | –ë–ï–ó % üí≥", callback_data="payment_card")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data="back_to_city")]
    ])

    await callback_query.message.answer(
        f"üè† –ì–æ—Ä–æ–¥: {city_name}\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {product_description}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product_price}‚Ç¥\n"
        f"üèÉ –†–∞–π–æ–Ω: {district_name}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: üí∞\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "üëâ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start",
        reply_markup=payment_keyboard
    )
    await callback_query.answer()

async def get_btc_to_uah_rate():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=uah"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data['bitcoin']['uah']
            else:
                return None

async def check_bitcoin_payment(address, expected_amount):
    url = f"https://api.blockcypher.com/v1/btc/main/addrs/{address}/balance"
    headers = {
        "Authorization": f"Bearer {BLOCKCYPHER_TOKEN}"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                total_received = data['total_received']

                if total_received >= expected_amount:
                    return True
                else:
                    return False
            else:
                raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ BlockCypher API")

def generate_order_id():
    return str(random.randint(100000, 999999))

@dp.callback_query(lambda c: c.data == "payment_bitcoin")
async def payment_bitcoin(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    city_name = user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    product_name = user_data.get("product", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    product_price = user_data.get("price", 0)
    district_name = user_data.get("district", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")
    btc_to_uah_rate = await get_btc_to_uah_rate()

    if btc_to_uah_rate is None:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚ùå")
        return

    btc_amount = product_price / btc_to_uah_rate
    time.sleep(2)
    message_text = (
        "üèÉ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –∞–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
        "üí± –í—Ä–µ–º—è –±—Ä–æ–Ω–∏ 90 –º–∏–Ω—É—Ç!\n"
        "‚†Ä‚†Ä‚†Ä\n"
        f"üè† –ì–æ—Ä–æ–¥:üèõ {city_name} üèõ\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product_price}‚Ç¥\n"
        f"üèÉ –†–∞–π–æ–Ω: {district_name}\n"
        f"üí± –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: Bitcoin\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "‚ùì /help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚ùì\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {btc_amount:.8f} BTC –Ω–∞ –∫–æ—à–µ–ª–µ–∫ üí≥\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "üí∞ <code>127cXY4Lqk4847FQXps7WM16Zxh9KHNaA7</code> üí∞\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚ùóÔ∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∏—Ö ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ —Ç—É —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @operator_thc ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ü–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç ‚ùóÔ∏è\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start"
    )

    payment_keyboard2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞", callback_data="check_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", callback_data="confirm_cancel_payment")]
    ])

    await callback_query.message.answer(message_text, reply_markup=payment_keyboard2, parse_mode="HTML")
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "confirm_cancel_payment")
async def confirm_cancel_payment(callback_query: types.CallbackQuery):
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_payment")],
        [InlineKeyboardButton(text="üí∞ –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è üí∞", callback_data="payment_bitcoin")]
    ])

    await callback_query.message.answer("‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É? ‚ùì", reply_markup=confirm_keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_payment")
async def cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω ‚úÖ")
    await state.clear()
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "payment_bitcoin")
async def back_to_payment(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–ª–∞—Ç–µ üí∞")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "check_payment")
async def check_payment_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data.get("order_id")
    target_amount = user_data.get("price", 0)
    payment_method = user_data.get("payment_method", "")

    if not order_id or not target_amount:
        await callback_query.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ùå")
        return

    success, message = await check_payment(order_id, target_amount, payment_method)

    if success:
        await callback_query.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! {message}")
    else:
        await callback_query.message.answer(f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}. {message}")

    await callback_query.answer()

async def get_usdt_to_uah_rate():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=uah"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data['tether']['uah']
            else:
                return None


@dp.callback_query(lambda c: c.data == "payment_usdt")
async def payment_usdt(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    city_name = user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    product_name = user_data.get("product", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    product_price = user_data.get("price", 0)
    district_name = user_data.get("district", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")

    usdt_to_uah_rate = await get_usdt_to_uah_rate()

    if usdt_to_uah_rate is None:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å usdt, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª—Å @operator_thc ‚ùå")
        return

    usdt_amount = product_price / usdt_to_uah_rate
    time.sleep(2)
    message_text = (
        "üèÉ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –∞–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
        "üí± –í—Ä–µ–º—è –±—Ä–æ–Ω–∏ 90 –º–∏–Ω—É—Ç!\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        f"üè† –ì–æ—Ä–æ–¥: üèõ {city_name} üèõ\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product_price}‚Ç¥\n"
        f"üèÉ –†–∞–π–æ–Ω: {district_name}\n"
        f"üí± –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: USDT TRC20\n\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "‚ùì /help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚ùì\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {usdt_amount:.8f} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ üí≥\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "üí∞ <code>TDhhazay3wD5eN1E42udFF1JqdLn2ygE1f</code> üí∞\n"
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n"
        "‚ùóÔ∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∏—Ö ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ —Ç—É —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @operator_thc ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ü–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç ‚ùóÔ∏è\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /start"
    )

    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞", callback_data="check_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå ", callback_data="city_kiev")]
    ])

    await callback_query.message.answer(message_text, reply_markup=payment_keyboard, parse_mode="HTML")
    await callback_query.answer()

async def get_transactions():
    headers = {"X-Token": MONOBANK_API_KEY}
    url = "https://api.monobank.ua/personal/statement/0/"

    now = int(datetime.datetime.now().timestamp())
    since = now - 3 * 60 * 60

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{url}{since}/{now}", headers=headers, timeout=10) as response:
                if response.status == 200:
                    transactions = await response.json()
                    return transactions
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å: {response.status} ‚ùå")
                    return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []

async def check_payment(order_id: str, target_amount: float, payment_method: str):
    transactions = await get_transactions()

    if not transactions:
        return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚ùå"

    unique_transactions = {tx['id']: tx for tx in transactions}.values()

    for tx in unique_transactions:
        amount = tx.get("amount", 0) / 100
        comment = tx.get("comment", "").strip()

        print(f"Checking transaction: {tx}, Amount: {amount}, Comment: {comment}")

        if abs(amount) == target_amount and comment == order_id:
            return True, f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! ID –∑–∞–∫–∞–∑–∞: {comment} ‚úÖ"

        if comment == order_id:
            return False, f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: —Å—É–º–º–∞ {amount} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º–æ–π ‚ùå"

    return False, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"


def generate_order_id():
    return str(random.randint(100000, 999999))

@dp.callback_query(lambda c: c.data == "payment_card")
async def payment_card(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    city_name = user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    product_name = user_data.get("product", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    product_price = user_data.get("price", 0)
    district_name = user_data.get("district", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω")

    order_id = generate_order_id()

    await state.update_data(order_id=order_id)

    message_text = (
        "üèÉ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –∞–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
        "üí± –í—Ä–µ–º—è –±—Ä–æ–Ω–∏ 90 –º–∏–Ω—É—Ç!\n"
        f"üè† –ì–æ—Ä–æ–¥:üèõ {city_name} üèõ\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product_price:.2f}‚Ç¥\n"
        f"üèÉ –†–∞–π–æ–Ω: {district_name}\n"
        f"üí± –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí∞ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {product_price:.2f}‚Ç¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏ —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\n"
        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>5355 2800 2980 0776</code>\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞ (—É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É): <code>{order_id}</code>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "‚ùóÔ∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–í–ï–†–ò–¢–¨ –û–ü–õ–ê–¢–£ ‚ùóÔ∏è\n"
        "‚ùóÔ∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ —Ç—É —Å—É–º–º—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @operator_thc ‚ùóÔ∏è\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ üëâ /start"
    )

    payment_keyboard2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞", callback_data="check_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå", callback_data="confirm_cancel_payment")]
    ])

    await callback_query.message.answer(message_text, reply_markup=payment_keyboard2, parse_mode="HTML")
    await callback_query.answer()
    await asyncio.sleep(1)

@dp.callback_query(lambda c: c.data == "confirm_cancel_payment")
async def confirm_cancel_payment(callback_query: types.CallbackQuery):
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_payment")],
        [InlineKeyboardButton(text="üí∞ –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è üí∞", callback_data="back_to_payment")]
    ])

    await callback_query.message.answer("‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É? ‚ùì", reply_markup=confirm_keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "cancel_payment")
async def cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω ‚úÖ")
    await state.clear()
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back_to_payment")
async def back_to_payment(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–ª–∞—Ç–µ üí∞")
    await callback_query.answer()


async def main():
    print("–ú–∞–≥–∞–∑–∏–Ω –≤–∫–ª—é—á–µ–Ω..")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())